package pt.tecnico.Client;

/* these imported classes are generated by the hello-world-server contract */
import pt.tecnico.grpc.ClientServer;
import pt.tecnico.grpc.HelloWorldServiceGrpc;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

import pt.ulisboa.tecnico.sdis.zk.ZKNaming;

public class ClientMain {

	public static void main(String[] args) throws Exception {
		System.out.println(pt.tecnico.Client.ClientMain.class.getSimpleName());

		// receive and print arguments
		System.out.printf("Received %d arguments%n", args.length);
		for (int i = 0; i < args.length; i++) {
			System.out.printf("arg[%d] = %s%n", i, args[i]);
		}

		// check arguments
		if (args.length < 3) {
			System.err.println("Argument(s) missing!");
			System.err.printf("Usage: java %s path zooHost zooPort%n", pt.tecnico.Client.ClientMain.class.getName());
			return;
		}

		final String zooHost = args[0];
		final String zooPort = args[1];
		final String path = args[2];

		// Lookup server location on ZooKeeper.
		System.out.println("Contacting ZooKeeper at " + zooHost + ":" + zooPort + "...");
		ZKNaming zkNaming = new ZKNaming(zooHost, zooPort);
		System.out.println("Looking up " + path + "...");
		final String target = zkNaming.lookup(path).getURI();
		System.out.println("Located server at " + target);

		// Channel is the abstraction to connect to a service endpoint
		// Let us use plaintext communication because we do not have certificates
		final ManagedChannel channel = ManagedChannelBuilder.forTarget(target).usePlaintext().build();

		// It is up to the client to determine whether to block the call
		// Here we create a blocking stub, but an async stub,
		// or an async stub with Future are always possible.
		HelloWorldServiceGrpc.HelloWorldServiceBlockingStub stub = HelloWorldServiceGrpc.newBlockingStub(channel);
		ClientServer.HelloRequest request = ClientServer.HelloRequest.newBuilder().setName("friend").build();

		// Finally, make the call using the stub
		ClientServer.HelloResponse response = stub.greeting(request);

		// HelloResponse has auto-generated toString method that shows its contents
		System.out.println(response);

		// A Channel should be shutdown before stopping the process.
		channel.shutdownNow();
	}

}
