syntax = "proto3";
package pt.tecnico.grpc;


message RegisterRequest {
	string userName = 1;
	string cipheredPassword = 2;
}

message RegisterResponse {
	string ack = 1;
}

message LoginRequest {
	string userName = 1;
	string cipheredPassword = 2;
}

message LoginResponse {
	string ack = 1;
}

message WriteFileRequest {
	string fileName = 1;
	bytes file = 2;
	bytes hash = 3;
	string username = 4;
}

message WriteFileResponse {
	string ack = 1;
}

message ReadFileRequest {
	string fileName = 1;
	string username = 2;
}

message ReadFileResponse {
	bytes file = 1;
	bytes hash = 2;
}

message DeleteFileRequest {
	string fileName = 1;
	string username = 2;
}

message DeleteFileResponse {
	string ack = 1;
}


message ListFileRequest {
	string userName = 1;
}


message ListFileResponse {
	repeated string fileName = 1;
}


message GivePermissionsRequest {
	bytes key = 1;
	string userName = 2;
	string targetUserName = 3;
	string fileName = 4;
	string permission = 5;
}

message GivePermissionsResponse {
	string ack = 1;
}

message UpdatePermissionsRequest {
	string userName = 1;
}

message UpdatePermissionsResponse {
	repeated bytes keys = 1;
	repeated string fileName = 2;
}

message GiveKeysToPermittedUsersRequest {
	bytes key = 1;
	string userName = 2;
	string fileName = 4;
}

message GiveKeysToPermittedUsersResponse {
	repeated string ack = 1;
}

// Request payload
message HelloRequest {
	// Each message attribute is strongly typed.
	// You also must assign a "tag" number.
	// Each tag number is unique within the message.
	string name = 1;

	// There are many more basics types, like Enum, Map
	// See https://developers.google.com/protocol-buffers/docs/proto3
	// for more information.
}

message HelloResponse {
	string greeting = 1;
}

//Used to transmit each message between client - leader server or leader server - file servers, 
// by encrypting with an ephemeral AES key the message, then encrypting said key with the target's public key, obtained from the CA
message EncryptedMessageRequest {
	bytes messageRequestBytes = 1;
	bytes encryptionKey = 2;
	bytes digitalSignature = 3;
	bytes timestamp = 4;
	string userName = 5;
}
message EncryptedMessageResponse {
	bytes messageResponseBytes = 1;
	bytes encryptionKey = 2;
	bytes digitalSignature = 3;
	bytes timestamp = 4;
}

// Defining a Service, a Service can have multiple RPC operations
service ClientToServerService {
	// Define a RPC operation
	rpc greeting(HelloRequest) returns (HelloResponse);

	// rpc login(LoginRequest) returns (LoginResponse);
	// rpc register(RegisterRequest) returns (RegisterResponse);
	// rpc writeFile(WriteFileRequest) returns (WriteFileResponse);
	// rpc readFile(ReadFileRequest) returns (ReadFileResponse);
	// rpc deleteFile(DeleteFileRequest) returns (DeleteFileResponse);
	// rpc listFiles(ListFileRequest) returns (ListFileResponse);
	// rpc givePermission(GivePermissionsRequest) returns (GivePermissionsResponse);

	rpc login(EncryptedMessageRequest) returns (EncryptedMessageResponse);
	rpc register(EncryptedMessageRequest) returns (EncryptedMessageResponse);
	rpc writeFile(EncryptedMessageRequest) returns (EncryptedMessageResponse);
	rpc readFile(EncryptedMessageRequest) returns (EncryptedMessageResponse);
	rpc deleteFile(EncryptedMessageRequest) returns (EncryptedMessageResponse);
	rpc listFiles(EncryptedMessageRequest) returns (EncryptedMessageResponse);
	rpc givePermission(EncryptedMessageRequest) returns (EncryptedMessageResponse);
	rpc updatePermissions(EncryptedMessageRequest) returns (EncryptedMessageResponse);
	rpc giveKeysToPermittedUsers(EncryptedMessageRequest) returns (EncryptedMessageResponse);
}
